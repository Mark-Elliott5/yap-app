// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "omitApi", "fullTextSearch", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @db.VarChar(30)
  userId            String  @db.VarChar(30)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @db.VarChar(30)
  sessionToken String   @unique
  userId       String   @db.VarChar(30)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

model Yap {
  id          String   @id @default(cuid()) @db.VarChar(30)
  text        String?
  date        DateTime @default(now())
  image       String?
  likes       User[]   @relation(name: "LikedYaps")
  author      User     @relation(name: "AuthoredYaps", fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String   @db.VarChar(30)
  echoes      Echo[]   @relation(name: "YapEchoes")
  replies     Yap[]    @relation("ParentYap")
  isReply     Boolean
  parentYap   Yap?     @relation("ParentYap", fields: [parentYapId], references: [id], onDelete: SetNull)
  parentYapId String?  @db.VarChar(30)
}

model Echo {
  id       Int      @id @default(autoincrement())
  user     User     @relation(name: "UserEchoes", fields: [username], references: [username], onDelete: Cascade)
  username String   @db.VarChar(15)
  date     DateTime @default(now())
  yapId    String   @db.VarChar(30)
  yap      Yap      @relation(name: "YapEchoes", fields: [yapId], references: [id], onDelete: Cascade)
}

enum NotifType {
  echo
  like
  reply
}

model Notification {
  id             Int       @id @default(autoincrement())
  type           NotifType
  user           User      @relation(name: "UserNotifications", fields: [username], references: [username], onDelete: Cascade)
  username       String    @db.VarChar(15)
  authorUsername String    @db.VarChar(15)
  author         User      @relation(name: "SentNotifications", fields: [authorUsername], references: [username], onDelete: Cascade)
  postId         String
  date           DateTime  @default(now())
}

model User {
  id                String         @id @default(cuid()) @db.VarChar(30)
  name              String?
  displayName       String?
  username          String?        @unique
  email             String         @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  imageKey          String?
  joinDate          DateTime       @default(now())
  role              UserRole       @default(USER)
  OAuth             Boolean        @default(false)
  private           Boolean        @default(false)
  bio               String?
  following         User[]         @relation("Following")
  followers         User[]         @relation("Following")
  yaps              Yap[]          @relation(name: "AuthoredYaps")
  likedYaps         Yap[]          @relation(name: "LikedYaps")
  echoes            Echo[]         @relation(name: "UserEchoes")
  accounts          Account[]
  sessions          Session[]
  notifications     Notification[] @relation(name: "UserNotifications")
  newNotifications  DateTime?
  sentNotifications Notification[] @relation(name: "SentNotifications")
}

// pnpx prisma generate     
// pnpx prisma db push
